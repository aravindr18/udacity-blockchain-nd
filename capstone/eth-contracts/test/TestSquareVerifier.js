// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var verifier = artifacts.require('SquareVerifier');
// - use the contents from proof.json generated from zokrates steps
var proof = require('../../zokrates/code/output/proof');

// Test verification with correct proof
contract('SquareVerifier', accounts => {
    const firstAccount = accounts[0];
    describe('zokrates proof', function() {
        beforeEach(async function() {
            try{
                this.contract = await verifier.new({from: firstAccount});
            } catch(e) {
                console.log(e);
            }
        });

        it('verification of proof correctness', async function() {
            let result = await this.contract.verifyTx.call(proof.proof.a, proof.proof.b, 
                    proof.proof.c, proof.inputs, {from:firstAccount});
            assert.equal(result, true, "Verification failed instead of succeeding");
        });

        it('verification of proof correctness should fail when incorrect inputs are given', async function () {
            let result = await this.contract.verifyTx.call(proof.proof.a, proof.proof.b, proof.proof.c, 
                                [0x99, 0x55], {from: firstAccount});
            assert.equal(result, false, "Incorrect proof");
        });
    }) 
    
})